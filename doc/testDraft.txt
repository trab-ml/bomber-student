BONNES PRATIQUES
 + https://users.ece.cmu.edu/~eno/coding/CCodingStandard.html

DEPENDANCES
 + cJSON https://github.com/DaveGamble/cJSON 

nc -u server_addr 49151 
nc -u localhost 49151

STRUCTURE DU PROJET
project/
|-- src/
|   |-- main.c
|   |-- module1.c
|   |-- module2.c
|   |-- ...
|-- include/
|   |-- module1.h
|   |-- module2.h
|   |-- ...
|-- bin/
|-- build/
|-- doc/
|-- Makefile
|-- README.md

CURRENTLY
bomber-student/
|-- src/
|   |-- cJSON.c
|   |-- server.c
|   |-- testcJSON.c
|   |-- ...
|-- include/
|   |-- cJSON.h
|-- bin/
    ... les .exe ...

+ Créer un serveur permettant à des clients de se connecter
    + Le premier msg du client constitue son login (qui sera stocké par le serveur comme tel.)
    + A une requête "GET maps/list" du client, le serveur enverra le JSON correspondant.
        + Le serveur doit être capable de sérialiser/désérialiser du JSON (cJSON)
    
    
+ Tester avec nc -u localhost 49151 (en créant 2 clients (2 terminaux) )
($ ./bin/main 49151)
[SERVER] Receive 127.0.0.1:49238
[SERVER] Add a new client to the list 127.0.0.1:49238, his login is CLIENT2
[SERVER] Receive 127.0.0.1:49238
response = JSON responseGET maps/list
[SERVER] Receive 127.0.0.1:49238


[CLIENT2]
$ nc -u localhost 49151
CLIENT2
 GET maps/list
JSON responseGET maps/list
GET map/list     
Bad Request !

+ buffer[len - 1] = '\0'; (inutile)
 recvfrom ne remplit pas le caractère nul à la fin de la chaîne.

+ Proprement initialiser la var response avec la taille nécessaire
max size of jsonResponse = 399; // Don't forget '\0' => needed size = 400

+ Retourner le JSON correspondant au lieu de "JSON responseGET maps/list"
 // properly init the buffer
 // generate the JSON by passing an object of an instance of queryGetMapsList
 // cpy the generated response into the buffer
 // send it to the client 
[REACHED]

+ Spécifier le protocole utiliser somewhere in docs/
 (comment il fctn? connex/déconnex? requêtes/réponse?)

+ Implémenter la réponse correspondante à "GET game/list"
 + une nouvelle struct (qui stoquera les différentes parties? (une autre pour) l'état des jeux?) ? 


+ Implémenter la réponse aux req. érronées

+ Dynamiser au max la création, le retrait et l'envoie du JSON au client 

+ Entamer les "POST ..."


CURRENT STATE OF main.c
---------------------------------------------------------------------------------------
[SERVER]
$ ./bin/main 49151
[SERVER] Receive 127.0.0.1:40936
[SERVER] Add a new client to the list 127.0.0.1:40936, his login is GHOST
[SERVER] Receive 127.0.0.1:40936

[CLIENT] 
$ nc -u localhost 49151
GHOST
 GET maps/list
{
        "action":       "maps/list",
        "statut":       "200",
        "message":      "ok",
        "nbMapsList":   1,
        "maps": [{
                        "id":   0,
                        "width":        24,
                        "height":       8,
                        "content":      "************************=----------------------==----==============----==----------****--------==------****------------==----==============----==----------------------=************************"
                }]
}

GHOST
 GET map/lists
{
        "statut":       400,
        "message":      "Bad request"
}