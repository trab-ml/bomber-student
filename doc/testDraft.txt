TESTER
```bash
$ ls 
bin  doc  include  Makefile  README.md  run.sh  src
$ chmod +x ./run.sh
$ ./run.sh
```

DEPENDANCES
 + cJSON https://github.com/DaveGamble/cJSON 

nc server_addr 49151 
nc localhost 49151

STRUCTURE DU PROJET
bomber-student/
|-- src/
|   |-- cJSON.c
|   |-- server.c
|   |-- testcJSON.c
|   |-- ...
|-- include/
|   | ... les .h ...
|-- bin/
|   | ... les .exe ...
|-- doc/
|   | ... doc + rscr ...
|-- Makefile
|-- README.md


COMING SOON
+ Gérer "2 successives Get err"

+ Créer un serveur permettant à des clients de se connecter
    + Le premier msg du client constitue son login (qui sera stocké par le serveur comme tel.)
    + A une requête "GET maps/list" du client, le serveur enverra le JSON correspondant.
        + Le serveur doit être capable de sérialiser/désérialiser du JSON (cJSON)

+ Proprement initialiser la var response avec la taille nécessaire
max size of jsonResponse = 399; // Don't forget '\0' => needed size = 400

+ Spécifier le protocole utilisé somewhere in docs/
 (comment il fctn? connex/déconnex? requêtes/réponse?)

+ Implémenter la réponse correspondante à "GET game/list"
 + une nouvelle struct (qui stoquera les différentes parties? (une autre pour) l'état des jeux?) ? 

+ Implémenter la réponse aux req. érronées

+ Dynamiser au max la création, le retrait et l'envoie du JSON au client 

+ Entamer les "POST ..."

+ Plusieurs clients simultanément

+ Plusieurs Serveurs https://excalidraw.com/#room=236d49594f1cecf84346,ra7t_Z5onmRz5D7Wn3DWBA


CURRENT STATE OF main.c
---------------------------------------------------------------------------------------
[SERVER]
$ make; bin/main 49151
gcc -Wall -Werror -g -Iinclude -c -o bin/server_utils.o src/server_utils.c
gcc -Wall -Werror -g -o bin/main bin/cJSON.o bin/client_list.o bin/main.o bin/server_utils.o bin/socket_utils.o bin/test_cJSON.o
[SERVER] Nouvelle connexion de 127.0.0.1:33628
[SERVER] Message reçu de 127.0.0.1:33628
[SERVER] Ajout d'un client à la liste 127.0.0.1:33628, son login est TRATRA

[SERVER] Message reçu de 127.0.0.1:33628
[SERVER] Message reçu de 127.0.0.1:33628
[SERVER] Message reçu de 127.0.0.1:33628
Erreur de segmentation (core dumped)

[CLIENT] 
$ nc localhost 49151
TRATRA
GET maps
{
        "statut":       400,
        "message":      "Bad request"
}GET maps/l
{
        "statut":       400,
        "message":      "Bad request"
}GET maps/list
{
        "action":       "maps/list",
        "statut":       "200",
        "message":      "ok",
        "nbMapsList":   1,
        "maps": [{
                        "id":   0,
                        "width":        24,
                        "height":       8,
                        "content":      "************************=----------------------==----==============----==----------****--------==------****------------==----==============----==----------------------=************************"
                }]
}GET maps/list


BONNES PRATIQUES
 + https://users.ece.cmu.edu/~eno/coding/CCodingStandard.html
 + https://sourceware.org/gdb/current/onlinedocs/gdb#Running
 + https://valgrind.org/docs/manual/manual-core-adv.html#manual-core-adv.gdbserver-simple
        [SERVER]
                + For Debugging
                gdb ./bin/main 
                (gdb) run 49151
                ./bin/main 4915

                + For Memory Analysis
                // -v --> verbose
                // valgrind --vgdb=yes --vgdb-error=0 ./bin/main 49151
                // valgrind --leak-check=full ./bin/main 49151
                valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes -s ./bin/main 49151

        [CLIENT]
                nc -u localhost 49151
                ...